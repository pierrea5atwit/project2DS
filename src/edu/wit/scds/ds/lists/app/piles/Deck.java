/* @formatter:off
 *
 * Â© David M Rosenberg
 * Spring, 2025
 *
 * Comp 2000 ~ Data Structures
 * Demonstration: List App
 * 
 * Usage restrictions:
 * 
 * You may use this code for exploration, experimentation, and furthering your
 * learning for this course. You may not use this code for any other
 * assignments, in my course or elsewhere, without explicit permission, in
 * advance, from myself (and the instructor of any other course).
 * 
 * Further, you may not post (including in a public repository such as on github)
 * nor otherwise share this code with anyone other than current students in my 
 * sections of this course
 * 
 * Violation of these usage restrictions will be considered a violation of
 * Wentworth Institute of Technology's Academic Honesty Policy.  Unauthorized posting
 * or use of this code may also be considered copyright infringement and may subject
 * the poster and/or the owners/operators of said websites to legal and/or financial
 * penalties.  Students are permitted to store this code in a private repository
 * or other cloud-based storage.
 *
 * Do not modify or remove this notice.
 *
 * @formatter:on
 */

package edu.wit.scds.ds.lists.app.piles ;

import edu.wit.scds.ds.lists.app.cards.Card ;
import edu.wit.scds.ds.lists.app.cards.Rank ;
import edu.wit.scds.ds.lists.app.cards.Suit ;

import static edu.wit.scds.ds.lists.app.cards.Card.* ;
import edu.wit.scds.ds.lists.app.utilities.NoCardsException ;

import jdk.incubator.vector.VectorOperators.Test ;

/**
 * Representation of a deck of cards
 * <p>
 * this is the source of all cards available to the game
 *
 * @author Dave Rosenberg
 *
 * @version 0.1 2025-03-31 skeleton for assignment
 * 
 * @author Your Name // TODO
 * 
 * @version 1.0 2025-03-31 Initial implementation per assignment
 */
public class Deck extends Pile
    {
    /*
     * utility constants
     */
    // none

    /*
     * data fields
     */
    // none

    /*
     * constructors
     */

    /**
     * Initialize a deck of cards with no Jokers
     */
    public Deck()
        {
        // instantiate the deck with no jokers
        this( 1 ) ;

        }	// end no-arg constructor


    /**
     * Initialize a deck of cards including a specified number of Jokers<br>
     * the cards are in sorted order
     * 
     * @param numberOfJokers
     *     the desired number of jokers to add to the deck
     */
    public Deck( final int numberOfJokers )
        {

        // initialize the pile
        super( FACE_DOWN ) ;

        // populate it with all the playing cards
        createPlayingCards() ;

        // add jokers, if any
        createJokers( numberOfJokers ) ;

        // put the cards in a predictable order
        super.sort() ;

        }  // end 1-arg constructor

    /*
     * public methods
     */
    // none

    // TODO implement this (if there's anything to add)

    /*
     * private utility methods
     */


    /**
     * Add the specified number of Joker cards to the deck
     * 
     * @param numberOfJokers
     *     the desired number of Jokers to add to the deck
     */
    private void createJokers( int numberOfJokers )
        {

        for ( int i = 0 ; i < numberOfJokers ; i++ )
            this.cards.add( new Card( Rank.JOKER ) ) ;

        }  // end createJokers()


    /**
     * Instantiate all the playing cards in a new deck
     * <ul>
     * <li>cards are generated by rank within suit
     * <li>jokers are excluded
     * </ul>
     */
    private void createPlayingCards()
        {

        // generate all the cards in the deck

        // loop adds 52 cards to deck
        for ( Suit suit : Suit.values() )
            {
            if ( suit.getDisplayName() != "" )
                {
                for ( Rank rank : Rank.values() )
                    {
                    String name = rank.getDisplayName() ;

                    if ( name != "Joker" )
                        this.cards.add( new Card( rank, Suit.CLUBS ) ) ;

                    }

                }

            }

        }  // end createPlayingCards()

    /*
     * for testing/debugging
     */


    /**
     * (optional) test driver
     * 
     * @param args
     *     -unused-
     */
    public static void main( String[] args )
        {

        Deck tester = new Deck() ;
//        tester.shuffle();
        System.out.printf( "%s%n%d", tester, tester.cardCount() ) ;

        }	// end main()

    }	// end class Deck